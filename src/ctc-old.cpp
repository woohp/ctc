#include <math.h>
#include <string.h>
#include <algorithm>
#include <chrono>
#include <iostream>
using namespace std;


#define LOG_ALMOST_ZERO -20.0f


float logadd(float x, float y)
{
    if (x == y)
        return x + M_LN2;

    const float diff = x - y;
    if (diff > 0)
        return x + log1p(exp(-diff));
    else
        return y + log1p(exp(diff));
}


float logadd(float x, float y, float z)
{
    if (x >= y and x >= z)  // x is largest
        return x + log1p(exp(y - x) + exp(z - x));
    else if (y >= x and y >= z) // y is largest
        return y + log1p(exp(x - y) + exp(z - y));
    else  // z is largest
        return z + log1p(exp(x - z) + exp(y - z));
}


float logadd(float* x, size_t n)
{
    if (n == 1)
        return x[0];
    else if (n == 2)
        return logadd(x[0], x[1]);
    else if (n == 3)
        return logadd(x[0], x[1], x[2]);
    const float max = *max_element(x, x+n);
    float sum = -1.0f;
    for (size_t i = 0; i < n; i++)
        sum += exp(x[i] - max);
    return max + log1p(sum);
}


float ctc(const float* __restrict__ y,
          const unsigned* __restrict__ l,
          const size_t timesteps,
          const size_t alphabet_size,
          const size_t labels_length,
          float* __restrict__ _grad)
{
    const size_t labels_length_p = labels_length * 2 + 1;
    const size_t y_size = timesteps * alphabet_size;
    const size_t a_size = timesteps * labels_length_p;
    const size_t b_size = a_size;
    const size_t alphabet_counts_size = alphabet_size - 1;  // not counting blank
    const size_t alphabet_indices_size = (alphabet_size - 1) * labels_length;
    const size_t workspace_size = y_size + a_size + b_size + labels_length_p + alphabet_indices_size + alphabet_counts_size;

    static_assert(sizeof(float) == sizeof(unsigned), "wrong size");
    
    float* __restrict__ const workspace = new float[workspace_size];
    float* __restrict__ const _log_y = workspace;
    float* __restrict__ const _a = _log_y + y_size;
    float* __restrict__ const _b = _a + a_size;
    float* __restrict__ const numbers_to_add = _b + b_size;
    unsigned* __restrict__ const _alphabet_indices = reinterpret_cast<unsigned*>(numbers_to_add + labels_length_p);
    unsigned* __restrict__ const alphabet_counts = _alphabet_indices + alphabet_indices_size;

    const unsigned blank = alphabet_size - 1;

    for (size_t i = 0; i < y_size; i++)
        _log_y[i] = log(y[i]);

    auto log_y = [&](size_t t, size_t s)
    {
        return _log_y[t * alphabet_size + s];
    };

    auto a = [&](size_t t, unsigned label) -> float&
    {
        return _a[t * labels_length_p + label];
    };

    auto b = [&](size_t t, unsigned label) -> float&
    {
        return _b[t * labels_length_p + label];
    };

    // forward step
    a(0, 0) = log_y(0, blank);
    a(0, 1) = log_y(0, l[0]);
    for (size_t s = 2; s < labels_length_p; s++)
        a(0, s) = LOG_ALMOST_ZERO;

    for (size_t t = 1; t < timesteps; t++)
    {
        size_t s = 0;
        a(t, s) = log_y(t, blank) + a(t-1, s);

        s = 1;
        a(t, s) = log_y(t, l[0]) + logadd(a(t-1, s), a(t-1, s-1));

        s = 2;
        a(t, s) = log_y(t, blank) + logadd(a(t-1, s), a(t-1, s-1));

        for (size_t _s = 1; _s < labels_length; _s++)
        {
            s = 2 * _s + 1;
            if (l[_s-1] == l[_s])
                a(t, s) = log_y(t, l[_s]) + logadd(a(t-1, s), a(t-1, s-1));
            else
                a(t, s) = log_y(t, l[_s]) + logadd(a(t-1, s), a(t-1, s-1), a(t-1, s-2));

            s++;
            a(t, s) = log_y(t, blank) + logadd(a(t-1, s), a(t-1, s-1));
        }
    }

    // backward step
    b(timesteps-1, labels_length_p-1) = log_y(timesteps-1, blank);
    b(timesteps-1, labels_length_p-2) = log_y(timesteps-1, l[labels_length-1]);
    for (size_t s = 0; s < labels_length_p - 2; s++)
        b(timesteps-1, s) = LOG_ALMOST_ZERO;

    for (int t = timesteps - 2; t >= 0; t--)
    {
        size_t s = labels_length_p - 1;
        b(t, s) = log_y(t, blank) + b(t+1, s);

        s = labels_length_p - 2;
        b(t, s) = log_y(t, l[labels_length-1]) + logadd(b(t+1, s), b(t+1, s+1));

        s = labels_length_p - 3;
        b(t, s) = log_y(t, blank) + logadd(b(t+1, s), b(t+1, s+1));

        for (int _s = labels_length - 2; _s >= 0; _s--)
        {
            s = 2 * _s + 1;
            if (l[_s+1] == l[_s])
                b(t, s) = log_y(t, l[_s]) + logadd(b(t+1, s), b(t+1, s+1));
            else
                b(t, s) = log_y(t, l[_s]) + logadd(b(t+1, s), b(t+1, s+1), b(t+1, s+2));

            s--;
            b(t, s) = log_y(t, blank) + logadd(b(t+1, s), b(t+1, s+1));
        }
    }

    const float log_prob = logadd(a(timesteps-1, labels_length_p-1), a(timesteps-1, labels_length_p-2));
    const float cost = -log_prob;

    auto alphabet_indices = [&](size_t k, size_t i) -> unsigned&
    {
        return _alphabet_indices[k * labels_length + i];
    };

    // for each "letter", figure out all the indices in the label where that letter is present
    memset(alphabet_counts, 0, sizeof(alphabet_counts[0]));
    for (size_t _s = 0; _s < labels_length; _s++)
    {
        unsigned k = l[_s];
        alphabet_indices(k, alphabet_counts[k]++) = _s * 2 + 1;
    }

    // calculate gradient
    auto grad = [&](size_t t, size_t k) -> float&
    {
        return _grad[t * alphabet_size + k];
    };

    for (size_t t = 0; t < timesteps; t++)
    {
        numbers_to_add[0] = a(t, 0) + b(t, 0) - log_y(t, blank);
        for (size_t _s = 0; _s < labels_length; _s++)
        {
            size_t s = _s * 2 + 1;
            numbers_to_add[s] = a(t, s) + b(t, s) - log_y(t, l[_s]);
            s++;
            numbers_to_add[s] = a(t, s) + b(t, s) - log_y(t, blank);
        }
        const float log_prob_t = logadd(numbers_to_add, labels_length_p);

        // for non-blank labels
        for (size_t k = 0; k < alphabet_size - 1; k++)
        {
            size_t i;
            for (i = 0; i < alphabet_counts[k]; i++)
            {
                unsigned s = alphabet_indices(k, i);
                numbers_to_add[i] = a(t, s) + b(t, s);
            }
            if (i == 0)
                grad(t, k) = 0.0f;
            else
            {
                const float grad_cost = logadd(numbers_to_add, i) - 2 * log_y(t, k) - log_prob_t;
                grad(t, k) = -exp(grad_cost);
            }
        }

        // for blank
        size_t i = 0;
        for (size_t s = 0; s < labels_length_p; s += 2)
            numbers_to_add[i++] = a(t, s) + b(t, s);
        float grad_cost = logadd(numbers_to_add, i) - 2 * log_y(t, blank) - log_prob_t;
        grad(t, blank) = -exp(grad_cost);
    }

    delete[] workspace;

    return cost;
}


int main()
{
    unsigned l[] = {0, 1, 2, 1, 0, 0, 1, 2, 1, 0, 0, 1, 2, 1, 0, 0, 1, 2, 1, 0, 0, 1, 2, 1, 0, 0, 1, 2, 1, 0, 0, 1, 2, 1, 0, 0, 1, 2, 1, 0, 0, 1, 2, 1, 0, 0, 1, 2, 1, 0, 0, 1, 2, 1, 0, 0, 1, 2, 1, 0, 0, 1, 2, 1, 0, 0, 1, 2, 1, 0, 0, 1, 2, 1, 0};
    float y[] = {
        0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.97, 0.01, 0.01, 0.01, 0.97,
        0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.97, 0.01, 0.01, 0.01, 0.97,
        0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.97, 0.01, 0.01, 0.01, 0.97,
        0.01, 0.01, 0.97, 0.01, 0.97, 0.01, 0.01, 0.01, 0.97, 0.01, 0.01,
        0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.97, 0.01, 0.01, 0.01, 0.97,
        0.01, 0.01, 0.01, 0.01, 0.01, 0.97, 0.01, 0.01, 0.01, 0.97, 0.01,
        0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.97, 0.01, 0.01, 0.01, 0.97,
        0.01, 0.01, 0.97, 0.01, 0.97, 0.01, 0.01, 0.01, 0.97, 0.01, 0.01,
        0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.97, 0.01, 0.01, 0.01, 0.97,
        0.97, 0.97, 0.01, 0.97, 0.01, 0.01, 0.01, 0.97, 0.01, 0.01, 0.01,
        0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.97, 0.01, 0.01, 0.01, 0.97,
        0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.97, 0.01, 0.01, 0.01, 0.97,
        0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.97, 0.01, 0.01, 0.01, 0.97,
        0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.97, 0.01, 0.01, 0.01, 0.97,
        0.01, 0.01, 0.97, 0.01, 0.97, 0.01, 0.01, 0.01, 0.97, 0.01, 0.01,
        0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.97, 0.01, 0.01, 0.01, 0.97,
        0.01, 0.01, 0.01, 0.01, 0.01, 0.97, 0.01, 0.01, 0.01, 0.97, 0.01,
        0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.97, 0.01, 0.01, 0.01, 0.97,
        0.01, 0.01, 0.97, 0.01, 0.97, 0.01, 0.01, 0.01, 0.97, 0.01, 0.01,
        0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.97, 0.01, 0.01, 0.01, 0.97,
        0.97, 0.97, 0.01, 0.97, 0.01, 0.01, 0.01, 0.97, 0.01, 0.01, 0.01,
        0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.97, 0.01, 0.01, 0.01, 0.97,
        0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.97, 0.01, 0.01, 0.01, 0.97,
        0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.97, 0.01, 0.01, 0.01, 0.97,
        0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.97, 0.01, 0.01, 0.01, 0.97,
        0.01, 0.01, 0.97, 0.01, 0.97, 0.01, 0.01, 0.01, 0.97, 0.01, 0.01,
        0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.97, 0.01, 0.01, 0.01, 0.97,
        0.01, 0.01, 0.01, 0.01, 0.01, 0.97, 0.01, 0.01, 0.01, 0.97, 0.01,
        0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.97, 0.01, 0.01, 0.01, 0.97,
        0.01, 0.01, 0.97, 0.01, 0.97, 0.01, 0.01, 0.01, 0.97, 0.01, 0.01,
        0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.97, 0.01, 0.01, 0.01, 0.97,
        0.97, 0.97, 0.01, 0.97, 0.01, 0.01, 0.01, 0.97, 0.01, 0.01, 0.01,
        0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.97, 0.01, 0.01, 0.01, 0.97,
        0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.97, 0.01, 0.01, 0.01, 0.97,
        0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.97, 0.01, 0.01, 0.01, 0.97,
        0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.97, 0.01, 0.01, 0.01, 0.97,
        0.01, 0.01, 0.97, 0.01, 0.97, 0.01, 0.01, 0.01, 0.97, 0.01, 0.01,
        0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.97, 0.01, 0.01, 0.01, 0.97,
        0.01, 0.01, 0.01, 0.01, 0.01, 0.97, 0.01, 0.01, 0.01, 0.97, 0.01,
        0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.97, 0.01, 0.01, 0.01, 0.97,
        0.01, 0.01, 0.97, 0.01, 0.97, 0.01, 0.01, 0.01, 0.97, 0.01, 0.01,
        0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.97, 0.01, 0.01, 0.01, 0.97,
        0.97, 0.97, 0.01, 0.97, 0.01, 0.01, 0.01, 0.97, 0.01, 0.01, 0.01,
        0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.97, 0.01, 0.01, 0.01, 0.97,
        0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.97, 0.01, 0.01, 0.01, 0.97,
        0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.97, 0.01, 0.01, 0.01, 0.97,
        0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.97, 0.01, 0.01, 0.01, 0.97,
        0.01, 0.01, 0.97, 0.01, 0.97, 0.01, 0.01, 0.01, 0.97, 0.01, 0.01,
        0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.97, 0.01, 0.01, 0.01, 0.97,
        0.01, 0.01, 0.01, 0.01, 0.01, 0.97, 0.01, 0.01, 0.01, 0.97, 0.01,
        0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.97, 0.01, 0.01, 0.01, 0.97,
        0.01, 0.01, 0.97, 0.01, 0.97, 0.01, 0.01, 0.01, 0.97, 0.01, 0.01,
        0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.97, 0.01, 0.01, 0.01, 0.97,
        0.97, 0.97, 0.01, 0.97, 0.01, 0.01, 0.01, 0.97, 0.01, 0.01, 0.01,
        0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.97, 0.01, 0.01, 0.01, 0.97,
        0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.97, 0.01, 0.01, 0.01, 0.97,
        0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.97, 0.01, 0.01, 0.01, 0.97,
        0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.97, 0.01, 0.01, 0.01, 0.97,
        0.01, 0.01, 0.97, 0.01, 0.97, 0.01, 0.01, 0.01, 0.97, 0.01, 0.01,
        0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.97, 0.01, 0.01, 0.01, 0.97,
        0.01, 0.01, 0.01, 0.01, 0.01, 0.97, 0.01, 0.01, 0.01, 0.97, 0.01,
        0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.97, 0.01, 0.01, 0.01, 0.97,
        0.01, 0.01, 0.97, 0.01, 0.97, 0.01, 0.01, 0.01, 0.97, 0.01, 0.01,
        0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.97, 0.01, 0.01, 0.01, 0.97,
        0.97, 0.97, 0.01, 0.97, 0.01, 0.01, 0.01, 0.97, 0.01, 0.01, 0.01,
        0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.97, 0.01, 0.01, 0.01, 0.97,
        0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.97, 0.01, 0.01, 0.01, 0.97,
        0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.97, 0.01, 0.01, 0.01, 0.97,
        0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.97, 0.01, 0.01, 0.01, 0.97,
        0.01, 0.01, 0.97, 0.01, 0.97, 0.01, 0.01, 0.01, 0.97, 0.01, 0.01,
        0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.97, 0.01, 0.01, 0.01, 0.97,
        0.01, 0.01, 0.01, 0.01, 0.01, 0.97, 0.01, 0.01, 0.01, 0.97, 0.01,
        0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.97, 0.01, 0.01, 0.01, 0.97,
        0.01, 0.01, 0.97, 0.01, 0.97, 0.01, 0.01, 0.01, 0.97, 0.01, 0.01,
        0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.97, 0.01, 0.01, 0.01, 0.97,
        0.97, 0.97, 0.01, 0.97, 0.01, 0.01, 0.01, 0.97, 0.01, 0.01, 0.01,
        0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.97, 0.01, 0.01, 0.01, 0.97,
        0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.97, 0.01, 0.01, 0.01, 0.97,
        0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.97, 0.01, 0.01, 0.01, 0.97,
        0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.97, 0.01, 0.01, 0.01, 0.97,
        0.01, 0.01, 0.97, 0.01, 0.97, 0.01, 0.01, 0.01, 0.97, 0.01, 0.01,
        0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.97, 0.01, 0.01, 0.01, 0.97,
        0.01, 0.01, 0.01, 0.01, 0.01, 0.97, 0.01, 0.01, 0.01, 0.97, 0.01,
        0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.97, 0.01, 0.01, 0.01, 0.97,
        0.01, 0.01, 0.97, 0.01, 0.97, 0.01, 0.01, 0.01, 0.97, 0.01, 0.01,
        0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.97, 0.01, 0.01, 0.01, 0.97,
        0.97, 0.97, 0.01, 0.97, 0.01, 0.01, 0.01, 0.97, 0.01, 0.01, 0.01,
        0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.97, 0.01, 0.01, 0.01, 0.97,
        0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.97, 0.01, 0.01, 0.01, 0.97,
        0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.97, 0.01, 0.01, 0.01, 0.97,
        0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.97, 0.01, 0.01, 0.01, 0.97,
        0.01, 0.01, 0.97, 0.01, 0.97, 0.01, 0.01, 0.01, 0.97, 0.01, 0.01,
        0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.97, 0.01, 0.01, 0.01, 0.97,
        0.01, 0.01, 0.01, 0.01, 0.01, 0.97, 0.01, 0.01, 0.01, 0.97, 0.01,
        0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.97, 0.01, 0.01, 0.01, 0.97,
        0.01, 0.01, 0.97, 0.01, 0.97, 0.01, 0.01, 0.01, 0.97, 0.01, 0.01,
        0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.97, 0.01, 0.01, 0.01, 0.97,
        0.97, 0.97, 0.01, 0.97, 0.01, 0.01, 0.01, 0.97, 0.01, 0.01, 0.01,
        0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.97, 0.01, 0.01, 0.01, 0.97,
        0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.97, 0.01, 0.01, 0.01, 0.97,
        0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.97, 0.01, 0.01, 0.01, 0.97,
        0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.97, 0.01, 0.01, 0.01, 0.97,
        0.01, 0.01, 0.97, 0.01, 0.97, 0.01, 0.01, 0.01, 0.97, 0.01, 0.01,
        0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.97, 0.01, 0.01, 0.01, 0.97,
        0.01, 0.01, 0.01, 0.01, 0.01, 0.97, 0.01, 0.01, 0.01, 0.97, 0.01,
        0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.97, 0.01, 0.01, 0.01, 0.97,
        0.01, 0.01, 0.97, 0.01, 0.97, 0.01, 0.01, 0.01, 0.97, 0.01, 0.01,
        0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.97, 0.01, 0.01, 0.01, 0.97,
        0.97, 0.97, 0.01, 0.97, 0.01, 0.01, 0.01, 0.97, 0.01, 0.01, 0.01,
        0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.97, 0.01, 0.01, 0.01, 0.97,
        0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.97, 0.01, 0.01, 0.01, 0.97,
        0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.97, 0.01, 0.01, 0.01, 0.97,
        0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.97, 0.01, 0.01, 0.01, 0.97,
        0.01, 0.01, 0.97, 0.01, 0.97, 0.01, 0.01, 0.01, 0.97, 0.01, 0.01,
        0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.97, 0.01, 0.01, 0.01, 0.97,
        0.01, 0.01, 0.01, 0.01, 0.01, 0.97, 0.01, 0.01, 0.01, 0.97, 0.01,
        0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.97, 0.01, 0.01, 0.01, 0.97,
        0.01, 0.01, 0.97, 0.01, 0.97, 0.01, 0.01, 0.01, 0.97, 0.01, 0.01,
        0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.97, 0.01, 0.01, 0.01, 0.97,
        0.97, 0.97, 0.01, 0.97, 0.01, 0.01, 0.01, 0.97, 0.01, 0.01, 0.01,
        0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.97, 0.01, 0.01, 0.01, 0.97,
        0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.97, 0.01, 0.01, 0.01, 0.97,
        0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.97, 0.01, 0.01, 0.01, 0.97,
        0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.97, 0.01, 0.01, 0.01, 0.97,
        0.01, 0.01, 0.97, 0.01, 0.97, 0.01, 0.01, 0.01, 0.97, 0.01, 0.01,
        0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.97, 0.01, 0.01, 0.01, 0.97,
        0.01, 0.01, 0.01, 0.01, 0.01, 0.97, 0.01, 0.01, 0.01, 0.97, 0.01,
        0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.97, 0.01, 0.01, 0.01, 0.97,
        0.01, 0.01, 0.97, 0.01, 0.97, 0.01, 0.01, 0.01, 0.97, 0.01, 0.01,
        0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.97, 0.01, 0.01, 0.01, 0.97,
        0.97, 0.97, 0.01, 0.97, 0.01, 0.01, 0.01, 0.97, 0.01, 0.01, 0.01,
        0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.97, 0.01, 0.01, 0.01, 0.97,
        0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.97, 0.01, 0.01, 0.01, 0.97,
        0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.97, 0.01, 0.01, 0.01, 0.97,
        0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.97, 0.01, 0.01, 0.01, 0.97,
        0.01, 0.01, 0.97, 0.01, 0.97, 0.01, 0.01, 0.01, 0.97, 0.01, 0.01,
        0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.97, 0.01, 0.01, 0.01, 0.97,
        0.01, 0.01, 0.01, 0.01, 0.01, 0.97, 0.01, 0.01, 0.01, 0.97, 0.01,
        0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.97, 0.01, 0.01, 0.01, 0.97,
        0.01, 0.01, 0.97, 0.01, 0.97, 0.01, 0.01, 0.01, 0.97, 0.01, 0.01,
        0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.97, 0.01, 0.01, 0.01, 0.97,
        0.97, 0.97, 0.01, 0.97, 0.01, 0.01, 0.01, 0.97, 0.01, 0.01, 0.01,
        0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.97, 0.01, 0.01, 0.01, 0.97,
        0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.97, 0.01, 0.01, 0.01, 0.97,
        0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.97, 0.01, 0.01, 0.01, 0.97,
        0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.97, 0.01, 0.01, 0.01, 0.97,
        0.01, 0.01, 0.97, 0.01, 0.97, 0.01, 0.01, 0.01, 0.97, 0.01, 0.01,
        0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.97, 0.01, 0.01, 0.01, 0.97,
        0.01, 0.01, 0.01, 0.01, 0.01, 0.97, 0.01, 0.01, 0.01, 0.97, 0.01,
        0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.97, 0.01, 0.01, 0.01, 0.97,
        0.01, 0.01, 0.97, 0.01, 0.97, 0.01, 0.01, 0.01, 0.97, 0.01, 0.01,
        0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.97, 0.01, 0.01, 0.01, 0.97,
        0.97, 0.97, 0.01, 0.97, 0.01, 0.01, 0.01, 0.97, 0.01, 0.01, 0.01,
        0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.97, 0.01, 0.01, 0.01, 0.97,
        0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.97, 0.01, 0.01, 0.01, 0.97,
        0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.97, 0.01, 0.01, 0.01, 0.97,
        0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.97, 0.01, 0.01, 0.01, 0.97,
        0.01, 0.01, 0.97, 0.01, 0.97, 0.01, 0.01, 0.01, 0.97, 0.01, 0.01,
        0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.97, 0.01, 0.01, 0.01, 0.97,
        0.01, 0.01, 0.01, 0.01, 0.01, 0.97, 0.01, 0.01, 0.01, 0.97, 0.01,
        0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.97, 0.01, 0.01, 0.01, 0.97,
        0.01, 0.01, 0.97, 0.01, 0.97, 0.01, 0.01, 0.01, 0.97, 0.01, 0.01,
        0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.97, 0.01, 0.01, 0.01, 0.97,
        0.97, 0.97, 0.01, 0.97, 0.01, 0.01, 0.01, 0.97, 0.01, 0.01, 0.01,
        0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.97, 0.01, 0.01, 0.01, 0.97,
    };
    float grad[sizeof(y) / sizeof(y[0])];

    auto start = std::chrono::high_resolution_clock::now();
    float cost = ctc(y, l, sizeof(y) / sizeof(y[0]) / 11, 11, sizeof(l) / sizeof(l[0]), grad);
    auto end = std::chrono::high_resolution_clock::now();
    std::chrono::duration<double> diff = end-start;
    printf("cost: %f\n", cost);
    std::cout << "elapsed: " << diff.count() << " s\n";

    return 0;
}
